/*
 * js script loader
 * 
 * Take a look at the file pmis_build.js for the list of javascript file that will be loaded.
 * Do not edit this file, to add and remove js file edit the file pmis_build.js.
 */
(function(document, win){
	"use strict";

	if(typeof win.PmisJsLoader !== 'undefined'){return;}

	var DEFAULT_UNKNOWN_OPTION_VALUE = "",
	ENV_PRODUCTION = "production",
	ENV_DEVELOPMENT = "development";
	
	var DEFAULT_OPTIONS = {
		environment: ENV_PRODUCTION,
		version: "1"
	};

	var loadedScripts = [];
	
	function absolutizeURL(url) {
		var location = document.location;
		if (url.match(/^(https?:|file:|)\/\//)) {
		} else if (url.indexOf("/") === 0) {
			url = ('https:' == location.protocol ? 'https://' : 'http://') + location.host + url;
		} else {
			var href = location.href;
			var cutPos = href.lastIndexOf("/");
			url = href.substring(0, cutPos + 1) + url;
		}
		return url;
	}

	function findLoaderScriptElement(filename) {
		var scripts = document.getElementsByTagName("script");
		for (var i = 0; i < scripts.length; i++) {
			if (scripts[i].src.indexOf(filename) >= 0) {
				return scripts[i];
			}
		}
		throw "cannot find '" + filename + "' script element";
	}

	function isScriptLoaded(script){
		for(var i=0; i < loadedScripts.length; i++){
			if( loadedScripts[i].indexOf(script) >= 0 )
				return true;
		}
		return false;
	}

	function updateQueryStringParameter(uri, key, value) {
		var re = new RegExp("([?&])" + key + "=.*?(&|$)", "i");
		var separator = uri.indexOf('?') !== -1 ? "&" : "?";
		if (uri.match(re)) {
			return uri.replace(re, '$1' + key + "=" + value + '$2');
		} else {
			return uri + separator + key + "=" + value;
		}
	}

	function readURLParam(filename) {
		var script = findLoaderScriptElement(filename);
		var url = script.src;
		return url.substring(url.indexOf("?") + 1);
	}

	function getDefaultOption(name) {
		return DEFAULT_OPTIONS[name] || DEFAULT_UNKNOWN_OPTION_VALUE;
	}

	function getUserOption(name) {
		var userOptions = Options.parse(readURLParam(Loader.NAME), "&");
		return userOptions.findByName(name);
	}

	var Options = function() {
		this.data = [];
	};

	Options.prototype = {
		add: function(name, value) {
			this.data.push({ "name": name, "value": value });
		},
		findByName: function(name) {
			var founded;
			for (var i = 0; i < this.data.length; i++) {
				if (this.data[i] && this.data[i].name === name) {
					founded = this.data[i].value;
					break;
				}
			}
			return founded;
		}
	};

	Options.parse = function(rawOptions, separator) {
		var options = new Options();
		var params = rawOptions.split(separator);
		for (var i = 0; i < params.length; i++) {
			var nameAndValue = params[i].split("=");
			options.add(nameAndValue[0], nameAndValue[1]);
		}
		return options;
	};

	var Loader = {
		NAME: "pmis_loader.js",

		OPTIONS: DEFAULT_OPTIONS,

		/**
		 * Load a single javascript file
		 *
		 * @param {string} moduleName javascript file to load
		 * @param {function} onload function to execute after the script is loaded
		 */
		load: function(oHead){

			function isAbsolutePath(name) {
				return name.match(/^((https?:|file:|)\/\/|\/)/);
			}

			return function(moduleName, onload){

				// check if the script is already on the page
				if( isScriptLoaded(moduleName) ) {
					try {
						if(typeof onload === "function") { onload(); }
					} catch (e) {}
					return;
				}
				loadedScripts.push(moduleName);

				//console.log("Loading script: " + moduleName);
				var url = isAbsolutePath(moduleName) ? moduleName : this.getBasePath() + moduleName;

				//console.log("Url: " + url);
				if (DEFAULT_OPTIONS.environment === ENV_DEVELOPMENT) {
					url = updateQueryStringParameter(url, '_', new Date().getTime());
				}
				url = updateQueryStringParameter(url, 'ver', DEFAULT_OPTIONS.version);
				
				// if dom ready
				//!!! 'interactive' state is fired too early on IE10 and the DOM is still not ready
				if ( document.body && ( !document.readyState 
						|| 'complete|interactive'.indexOf( document.readyState ) != -1 ) ) 
				{
					var script = document.createElement( 'script' );
					script.type = 'text/javascript';
					script.onload = script.onreadystatechange = function(){
						var rs = this.readyState;
						if (rs && rs != 'complete' && rs != 'loaded') return;
						try {
							if(typeof onload === "function") { onload(); } 
						} catch (e) {}
					}
					oHead.appendChild( script );
					script.src = url;
				}
				// if dom not ready
				else
				{
					document.write( '<script type="text/javascript" src="' + url + '"></script>' );
					if( Element.prototype.addEventListener && typeof onload === "function" ){
						window.addEventListener('load', onload);
					}
				}
			}
			
		}(document.head || document.getElementsByTagName("head")[0]),
		
		/**
		 * Load one or more javascript files
		 * 
		 * @param {(string|string[])} moduleName javascript file to load
		 * @param {function} onload function to execute after the script is loaded
		 */
		loadModule: function(moduleName, onload) {
			if(!moduleName || !moduleName.length ){
				return;
			}
			
			// if is array go here
			if( moduleName.constructor === Array )
			{
				var totmods = moduleName.length;
				for (var i = 0; i < moduleName.length; i++) 
				{
					Loader.load(moduleName[i], function(){
						totmods -= 1;
						if(totmods == 0){
							if(onload) { onload.apply(this); }
						}
					});
				}
				return;
				
				// if dom ready
				/*if ( document.body && ( !document.readyState || document.readyState == 'complete' ) ) 
				{
					if(moduleName.length > 1)
					{
						Loader.loadModule(moduleName[0], function(){
							moduleName.shift();
							Loader.loadModule(moduleName, onload);
						});
						return;
					} 
					else if(moduleName.length == 1)
					{
						moduleName = moduleName[0];
					}
				}
				// if dom not ready
				else 
				{
					for (var i = 0; i < moduleName.length; i++) 
					{
						Loader.load(moduleName[i], onload );
					}
					return;
				}*/
			}
			
			// not array go here
			Loader.load(moduleName, onload);
		},
		
		getBasePath: function(filename) {
			var script = findLoaderScriptElement(filename || Loader.NAME);				
			var basePath = script.src.replace(/[^\/]+\/?$/, '');
			return absolutizeURL(basePath);
		},
		
		getOption: function(name) {
			return getUserOption(name) || getDefaultOption(name);
		},

		loadedScripts: loadedScripts
	};
	window.PmisJsLoader = Loader;
	
	function init(){
		var envConfig = getUserOption("environment");
		if (envConfig) {
			DEFAULT_OPTIONS.environment = envConfig;
		}
		var envConfig = getUserOption("ver");
		if (envConfig) {
			DEFAULT_OPTIONS.version = envConfig;
		}
		
		//Loader.loadModule("pmis_build.js");
	}
	
	init();
	
})(document, window);